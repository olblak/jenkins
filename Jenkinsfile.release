// -*- Groovy -*-
/*
  Require credentials:
    - Microsoft Azure Service Principal
    - Azure Storage Account

  Maven docker image cannot be run with the root user
  https://batmat.net/2017/01/30/do-not-run-your-tests-in-continuous-integration-with-the-root-user/
  Docker container related to jenkins-jnlp require:
  * uid 10000,
  * gid 10000
  * /home/jenkins/.jenkins

  Jenkins Plugins:
    * Azure-Credentials
    * SSH-agent

  docker image olblak/maven is just a customized docker image based on maven where maven is run as
  user jenkins with uid 10000 and gid 10000, there is also a volume /home/jenkins/.jenkins defined in the image
  otherwise the directory is created with root permission and Jenkins cannot add files there
*/

pipeline {
    agent {
      kubernetes {
        label 'jenkins-release'
        defaultContainer 'jnlp'
        yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    some-label: jenkins-release
spec:
  containers:
  - name: maven
    image: olblak/maven:3-jdk-8
    imagePullPolicy: Always
    workdir: /home/jenkins
    env:
      - name: HOME
        value: "/home/jenkins/workspace"
    command:
    - cat
    tty: true
  - name: azure-cli
    image: microsoft/azure-cli:2.0.41
    workdir: /home/jenkins
    command:
    - cat
    tty: true
"""
      }
    }

    options {
      buildDiscarder logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '',
        numToKeepStr: '10'
      )
    }

    environment {
      GIT_EMAIL                     = 'jenkins-bot@example.com'
      GIT_NAME                      = 'jenkins-bot'
      GIT_SSH_COMMAND               = 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
      GPG_FILE                      = 'gpg-test-jenkins-release.gpg'
      GPG_KEYNAME                   = 'sandbox-release-jenkins'
      GPG_PASSPHRASE                = credentials('release-gpg-passphrase')
      REPOSITORY_PASSWORD           = credentials('maven-repository-password')
      SIGN_ALIAS                    = 'jenkins'
      SIGN_KEYSTORE                 = "${ env.WORKSPACE + '/jenkins.pfx' }"
      SIGN_STOREPASS                = credentials('signing-cert-pass')
    }

    stages {
      stage('Clean Release') {
        steps {
          container('maven') {
            sh 'mvn release:clean'
          }
        }
      }
      stage('Retrieve Signing Certificate') {
        environment {
          AZURE_VAULT_NAME   = 'overnin'
          AZURE_VAULT_CERT   = 'sandbox'
          AZURE_VAULT_FILE   = 'jenkins.pem'
        }

        steps {
          container('azure-cli') {
            // Download pem certificate
            withCredentials([ azureServicePrincipal('cloudbees-sandbox' )]) {
            //withCredentials([ azureServicePrincipal('release-service-principal' )]) {
              // Log on Azure
              sh 'az login --service-principal \
                -u $AZURE_CLIENT_ID \
                -p $AZURE_CLIENT_SECRET \
                -t $AZURE_TENANT_ID'
              // Download Certificate from Azure KeyVault
              sh 'az keyvault secret download \
                --vault-name $AZURE_VAULT_NAME \
                --name sandbox \
                --file $AZURE_VAULT_FILE'
              // Convert private/public key to a pkcs12 keystore
              sh 'scripts/buildJenkins.bash --configureKeystore'
            }
          }
        }
      }
      stage('Retrieve Signing GPG key') {
        environment {
          AZURE_STORAGE_ACCOUNT         = 'overninreleasekey'
          AZURE_STORAGE_CONTAINER_NAME  = 'gpg'
          AZURE_STORAGE_KEY             = credentials('gpg-storage-account-key')
        }

        steps {
          container('azure-cli') {
            sh 'az storage blob download \
              --container-name $AZURE_STORAGE_CONTAINER_NAME \
              --name $GPG_FILE \
              --file $GPG_FILE'
          }
        }
      }
      stage('Prepare Release') {
        steps {
          container('maven') {
            // Maven required git push permission on https://github.com/jenkinsci/jenkins
            sshagent(['release-key']) {
              // Maven Release requires gpg key with password password and a certificate key with password
              sh 'scripts/buildJenkins.bash --configureGPG'
              sh 'scripts/buildJenkins.bash --configureGit'
              sh 'scripts/buildJenkins.bash --prepareRelease'
              script {
                def properties = readProperties file: 'release.properties'
                env.RELEASE_SCM_TAG = properties['scm.tag']
              }
            }
          }
        }
      }
      stage('Stage Release') {
        steps {
          container('maven') {
            // Maven required git push permission on https://github.com/jenkinsci/jenkins
            sshagent(['release-key']) {
              sh 'scripts/buildJenkins.bash --stageRelease'
            }
          }
        }
      }
      stage('Commit Release') {
        steps {
          container('maven') {
            // Maven required git push permission on https://github.com/jenkinsci/jenkins
            //input 'Publish?'
            sshagent(['release-key']) {
              // By default git config url is set to https instead of ssh
              sh 'sed -i \'s#url = https://github.com/#url = git@github.com:#\' .git/config'
              sh 'git push origin $RELEASE_SCM_TAG'
            }
          }
        }
      }
      stage('Reincrementalify') {
        steps {
          container('maven') {
            // Maven required git push permission on https://github.com/jenkinsci/jenkins
            sshagent(['release-key']) {
              sh 'mvn io.jenkins.tools.incrementals:incrementals-maven-plugin:reincrementalify'
              sh 'git commit -m "mvn incrementals:reincrementalify" pom.xml "*/pom.xml"'
              // Git push but which tag?
            }
          }
        }
      }
      stage('Publish Jenkins Package') {
        environment {
          AZURE_STORAGE_ACCOUNT = 'overninjenkinsreleases'
          AZURE_STORAGE_KEY = credentials('release-storage-account-key')
          JENKINS_WAR = "${ env.WORKSPACE + '/war/target/jenkins.war'}"
          JENKINS_ASC = "${ env.WORKSPACE + '/war/target/jenkins.asc'}"
          AZURE_SHARE_NAME = "war-rc"
        }
        steps {
          container('azure-cli') {
            sh 'gpg --verify JENKINS_ASC JENKINS_WAR'
            sh 'unzip -qc JENKINS_WAR META-INF/MANIFEST.MF | grep \'Jenkins-Version\' | awk \'{print $2}\''
            sh 'az storage container upload \
              --acount-name $AZURE_STORAGE_ACCOUNT \
              --share-name $AZURE_SHARE_NAME \
              --path $VERSION/jenkins.war \
              --timeout 30 \
              --source $JENKINS_WAR'
          }
        }
      }
    }
    post {
    /*
        always {
            cleanWs()
        }
    */
        failure {
            input """Pipeline failed.
We will keep the build pod around to help you diagnose any failures.
Select Proceed or Abort to terminate the build pod"""
        }
    }
}
